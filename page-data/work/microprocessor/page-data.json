{
    "componentChunkName": "component---src-pages-work-mdx-slug-js",
    "path": "/work/microprocessor/",
    "result": {"data":{"mdx":{"frontmatter":{"hero_image_alt":"Simulation of Microprocessor with RISC-V architecture","hero_link_project_deploy":"","hero_link_project_repository":"https://github.com/kikeztw/microprocessor-arq-ula","hero_tech_stack":"C++ SYSTEMC MAKE ASSEMBLY","hero_tech_plataform":"LINUX","hero_tech_blogpost":"","hero_tech_blogpost_link":"","hero_tech_text":"Implementation of each and every one of the components of the RISC-V data path.","title":"microprocessor","hero_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/daniel_gatsby-portafolio_nuevo/static/bf8889eb25d0ed0512e20097098b9d76/2b3bf/data-path.png","srcSet":"/daniel_gatsby-portafolio_nuevo/static/bf8889eb25d0ed0512e20097098b9d76/9967c/data-path.png 288w,\n/daniel_gatsby-portafolio_nuevo/static/bf8889eb25d0ed0512e20097098b9d76/5d627/data-path.png 577w,\n/daniel_gatsby-portafolio_nuevo/static/bf8889eb25d0ed0512e20097098b9d76/2b3bf/data-path.png 1153w","sizes":"(min-width: 1153px) 1153px, 100vw"},"sources":[{"srcSet":"/daniel_gatsby-portafolio_nuevo/static/bf8889eb25d0ed0512e20097098b9d76/cc38b/data-path.webp 288w,\n/daniel_gatsby-portafolio_nuevo/static/bf8889eb25d0ed0512e20097098b9d76/f4d2e/data-path.webp 577w,\n/daniel_gatsby-portafolio_nuevo/static/bf8889eb25d0ed0512e20097098b9d76/5a2df/data-path.webp 1153w","type":"image/webp","sizes":"(min-width: 1153px) 1153px, 100vw"}]},"width":1153,"height":643}}},"others":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"microprocessor\",\n  \"hero_image\": \"./data-path.png\",\n  \"hero_image_alt\": \"Simulation of Microprocessor with RISC-V architecture\",\n  \"hero_image_description\": \"Simulation of Microprocessor with RISC-V architecture\",\n  \"hero_priority\": \"36\",\n  \"hero_link_project_deploy\": \"\",\n  \"hero_link_project_repository\": \"https://github.com/kikeztw/microprocessor-arq-ula\",\n  \"hero_tech_stack\": \"C++ SYSTEMC MAKE ASSEMBLY\",\n  \"hero_tech_plataform\": \"LINUX\",\n  \"hero_tech_blogpost\": \"\",\n  \"hero_tech_blogpost_link\": \"\",\n  \"hero_tech_text\": \"Implementation of each and every one of the components of the RISC-V data path.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Microprocessor\"), mdx(\"p\", null, \"Final project of computer architecture, since I am a student of the Systems Engineering career, where I am currently studying fifth-semester subjects.\"), mdx(\"p\", null, \"This was a very interesting project as I learned how the computer works at a very low level.\"), mdx(\"p\", null, \"This project had to create the necessary stages for the execution of a Microprocessor, which uses a pipeline, and is divided into the following stages:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Instruction fetch: this stage increased the program counter by 1 and checked if it took a jump, which was checked through a multiplexer, then 4 bytes of the instruction were obtained from the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"L1 cache of instructions\"), \", which is passed to routing records.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Instruction decoding: this instruction was decoded and the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"OPCODE\"), \" \", \"(\", \"operation code\", \")\", \" were obtained, the operands \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"(\", \"RS1, RS2, RD\", \")\"), \" that are passed to the register file which returns the corresponding value, and other codes such as func3, func7; the signed 32-bit extended immediate value, rs1 and rs2, is passed to the corresponding pipeline register.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Execute Compute: in this stage the alu is executed, where depending on the OPCODE, and fun3 and func7 it performs a corresponding arithmetic operation.\"))), mdx(\"p\", null, \"4.Access to memory: at this stage there is a gate which decides whether to take the jump or not, in the case of jumps such as the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"jump\"), \" instruction, it also performs either the reading or writing of data in the data Cache L1.\"), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Write back: this stage decides whether to record the corresponding values corresponding in the log file.\")), mdx(\"p\", null, \"All the instructions are synchronized by clock, and in each stage certain gates or certain modules are turned on depending on the signals of each operation, which is achieved thanks to the control unit.\"), mdx(\"p\", null, \"This project was carried out in collaboration with 4 members of the group, their names are on github, collaborators section.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"05424110-ae1d-55f1-9440-f8d38d20f824","slug":"microprocessor/","__params":{"slug":"microprocessor"}}},
    "staticQueryHashes": []}